var mongodb = require('mongodb');
var MongoClient = mongodb.MongoClient;
// SET THIS TO A DB ON MLAB FOR DEPLOYMENT.
var url = process.env.MONGO_ADDRESS;

// ONE COLLECTION: "polls"
// FORMAT:
// {_id: autogenerated,
//  creator_id: "bob1",
//  question: "Pick answer1, answer2, or answer3",
//  answers: ["answer1", "answer2", "answer3"],
//  voted: [{user_ip: 0.0.0.0, answer: "answer1"},
//          {user_ip: 0.0.0.1, answer: "answer3"},
//          {user_ip: 0.0.0.2, answer: "answer1"},
//          {user_ip: 0.0.0.3, answer: "answer2"}]
// }

// db.inventory.insert({creator_id:'bob1', question:'pick answer1, answer2, or answer3', answers:['answer1','answer2','answer3'], voted:[]}

module.exports.getPolls = function(callback) {
  MongoClient.connect(url, function (err, db) {
    if (err) {
      console.log('Unable to connect to the mongoDB server. Error:', err);
    } else {
      db.collection('polls').find().toArray( function (err, result) {
        if (err) {
          console.log(err);
        } else {
          // If no results found, redirect to a page notifying user
          console.log("mongodb getPolls success: " + result);
          db.close();
          callback(err, result);
        }
      });
    }
  });
}

module.exports.getUserPolls = function(user_id, callback) {
  MongoClient.connect(url, function (err, db) {
    if (err) {
      console.log('Unable to connect to the mongoDB server. Error:', err);
    } else {
      db.collection('polls').find({'creator_id':user_id}).toArray( function (err, result) {
        if (err) {
          console.log(err);
        } else {
          // If no results found, redirect to a page notifying user
          console.log("mongodb getUserPolls success: " + result);
          db.close();
          callback(err, result);
        }
      });
    }
  });
}

module.exports.createPoll = function(user_id, poll_question, poll_answers, callback) {
  var newEntry = {"creator_id": user_id, "question": poll_question, "answers": poll_answers, "voted":[]};
  MongoClient.connect(url, function (err, db) {
    if (err) {
      console.log('Unable to connect to the mongoDB server. Error:', err);
    } else {
      db.collection('polls').insertOne(newEntry, function (err, result) {
        if (err) {
          console.log(err);
        } else {
          console.log('Inserted documents into the "users" collection. The documents inserted with "_id" are:', result.length, result);
          db.close();
          callback(err, result);
        }
      });
    }
  });
}

module.exports.addPollOption = function(poll_id, new_answer_array, callback) {
  var filterclause = {'_id': poll_id};
  var updateclause = {'answers': new_answer_array};
  MongoClient.connect(url, function (err, db) {
    if (err) {
      console.log('Unable to connect to the mongoDB server. Error:', err);
    } else {
      db.collection('polls').update(filterclause, updateclause).toArray( function (err, result) {
        if (err) {
          console.log(err);
        } else {
          console.log("mongodb addPollOption success: " + result);
          db.close();
          callback(err, result);
        }
      });
    }
  });
}

module.exports.deletePoll = function(user_id, poll_id, callback) {
  var filterclause = {'_id': poll_id, 'creator_id': user_id};
  MongoClient.connect(url, function (err, db) {
    if (err) {
      console.log('Unable to connect to the mongoDB server. Error:', err);
    } else {
      db.collection('polls').remove(filterclause).toArray( function (err, result) {
        if (err) {
          console.log(err);
        } else {
          console.log("mongodb removeQuery success: " + result);
          db.close();
          callback(err, result);
        }
      });
    }
  });
}

module.exports.votePoll = function(user_ip, poll_id, answer, callback) {
  var filterclause = {'_id': poll_id};
  MongoClient.connect(url, function (err, db) {
    if (err) {
      console.log('Unable to connect to the mongoDB server. Error:', err);
    } else {
      // Find existing voted array
      db.collection('polls').find(filterclause).toArray( function (err, result) {
        if (err) {
          console.log(err);
        } else {
          // Update the 'voted' array.
          var voted = result[0].voted;
          voted.push({'user_ip':user_ip, 'answer': answer});
          db.collection.update(filterclause, {'voted': voted}, function(err, result) {
            console.log("Updated poll id: " + poll_id)
            db.close();
            callback(err, result);
          });
        }
      });
    }
  });
}
